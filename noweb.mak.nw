\begin{document}
This is a generic makefile to generate files and documentation with \emphasis{noweb}.
The main idea is to use `noweb in a many to many way, ie, each noweb file can participate
in the generation of different file, and one file can generate by many noweb file.
The typicall example of 1 noweb file generating many files could one file 
generating a C-header and body files or the same generating the code, some test
and some documentation etc. Having multiple noweb files generating one file can used
to generate a makefile a global README etc ...

At the moment, this makefile is really generic and try to not impose any structure to the 
generating files nor the generated ones. The directory structure of the generated files
can be totally different form  the generating file structure. However it's probably a good
practice to separate the  source files in a separate directory. Default is master.
The main problem when having a file generated by many other is to decide which source files
needs to be involve?
The obvious answer is all the files which contains the required root. However what if a file
use a non-file chunk defined somewhere else? We could try to resolve chunk dependency but
we can't decide if a chunk is local to a file or should be used by every file including
a chunk with the same name. So solve this problem we let the user specify it's own dependency
sub makefile.
<<*>>=

NOWEB_SOURCE_DIR:= master
@

So how does it works ?
The only assumption is that every noweb file generate a makefile. This makefile should
describe which files are generated by itself. Each noweb file needs to declare a @<<*>> chunk
even if it's empty. Each makefile  will be included in the general one.
By convenience we auto generate the dependency between root file.
<<auto root dependency>>=
	cat $< | sed -n 's/^@<<\([^ *]*\)>>.*/\1: $(subst /,\/,$<)/p' > $@

@
For every noweb file we generate the corresponding makefile in the NOWEB_TMP_DIR directory.
We need to extract the @<<*>> root
<<extract makefile from noweb>>=
-notangle -t4 -L'#line %L "%F":%N' $<  >> $@
<<create target directory>>=
@mkdir -p $(dir $@)
@
And create the missing directory
<<*>>=
NOWEB_TMP_DIR:=.noweb
${NOWEB_TMP_DIR}/%.mak: ${NOWEB_SOURCE_DIR}/%.nw 
	@echo making $@ from $^
	<<create target directory>>
	<<auto root dependency>>
	<<extract makefile from noweb>>
@

Now we need to generate All makefile and include them in the standard makefile. 
Let's create a variable with the list of all nowweb source files
<<*>>=
NOWEB_SOURCE := $(shell find ${NOWEB_SOURCE_DIR} -name '*.nw')
@
And deducte from it the list of makefiles (they are in the NOWEB_TMP_DIR directory
and have the .mak extension)
<<*>>=
NOWEB_MAKEFILES := $(patsubst ${NOWEB_SOURCE_DIR}/%.nw, ${NOWEB_TMP_DIR}/%.mak, $(NOWEB_SOURCE))
env:
	@echo NOWEB_SOURCE $(NOWEB_SOURCE)
	@echo NOWEB_MAKEFILES $(NOWEB_MAKEFILES)
	@echo NOWEB_TARGETS $(NOWEB_TARGETS)
@
Let's cat all those files in one so we can include it
<<*>>=
$(NOWEB_TMP_DIR)/.dependencies.mak: $(NOWEB_MAKEFILES)
	@cat $^ > $@

-include $(NOWEB_TMP_DIR)/.dependencies.mak
@
Now we need to generate the file from the source. The obvious way
consisting to write a rule without dependency and use the dependencies
from the generated makefiles will result in a anything-rule which is not
good. It will work with everything, even files which are not meant to be nowebed.

We need to only make this rules works for the file which can be generated.
Let's generate a file which define the notangle rule for every target.
And apply it to all the 'target' we can find in the generated makefiles.
We do this with a static pattern rule.
<<*>>=
<<target list>>
$(NOWEB_TARGETS): %:
	notangle $^ -R$@ | cpif $@
@

Last thing is to be able to generate and clean all of the targets.
<<*>>=
generate_all: $(NOWEB_TARGETS)
noweb: generate_all

clean_noweb_generated: 
	rm -rf $(NOWEB_TARGETS)

clean_noweb_tmp:
	rm -rf $(NOWEB_TMP_DIR)

clean_noweb: clean_noweb_generated clean_noweb_tmp
<<target list>>=
NOWEB_TARGETS = $(shell cat $(NOWEB_TMP_DIR)/.dependencies.mak | sed  -n 's/^\([^\#].*\):.*/\1/p' | sort -u  )


@
How to do 1-to-many
Define many roots in the same file.

How to do many-to-1
Make different file use the same root.

How to include a file

TODO
delete generated files when source file are removed.
Add the file to include as a list of dependency for the generated file.


\end{document}

